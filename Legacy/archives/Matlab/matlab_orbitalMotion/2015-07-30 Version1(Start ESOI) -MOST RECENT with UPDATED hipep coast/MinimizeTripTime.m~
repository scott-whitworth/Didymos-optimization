%MinimizeTripTime is a function designed to take an order for a fourier
%fit, an estimate of how long the trip will take and then a convergance
%radius for its solution.  Given that information it will optamize
%trajectories for the ship to land on the asteroid for successively smaller
%time guesses untill it finds the minimum possible time in which the ship
%can successfully land.  That value is then returned as the most efficient
%time.  Much of the relevant problem information specifically about the
%shipspecifications and asteroid orbital parameters are read in from other
%files.  See InitializeConstants.m for more information.

%This function is essentially the entry point to our program, it can be
%called to iteratively gather data, but almost all of our functionality
%branches off of this.
function [finalTime,EscapeTime,timeToExecute,PhiCoeff,PlotFileName,Rerror,Thetaerror,Uerror,Herror,fval,lastConverge,massPowerPlant,massStruct,NDmdot] = MinimizeTripTime(order,direction,MassFuel,~,~,NumberOfEngines,alphaP,alphaT,inputPower, uexhaust, engineEfficiency,payloadMass,lastConverge)
tic; %starts timer for function
%*****************************************
%Global Variables
%global G_c;
%global G_c_converge;   %keeps track of the fourier coefficients of the previous convergence
global G_lastescape;        %earth escape time of last convergence
%global G_lastfval;          %fval of last convergence
%global last_conv;      %keeps track of the most recent (and therefore lowest) converging time

%global G_conv;         %flag variable whether the previous timeguess converged or not; updated in timeObjectiveFunction
%global tolx;           %tolerance of the variable being varied by fminsearch used for the landingObjectiveFunction
%global tolfun;         %tolerance of the function value of fminsearch
%global G_interesting;   %flag variable whether the value of fval was below the interesting threshold; updated in timeObjectiveFunction
%*****************************************

[massPowerPlant,massThruster,massPayload,launchRadius,GC_ARF,GC_ATF,GC_AUF,GC_AHF,GC_ERF,GC_ETF,GC_EUF] = InitializeConstants(direction,MassFuel,NumberOfEngines,alphaP,alphaT,inputPower, uexhaust, engineEfficiency,payloadMass); %Initializes all global constants such as planet masses and engine specifications

%fminsearch is an unconstrained optamization package in MATLAB.  It gets
%passed a vector of independent variables, in this case 1 variable
%(timeGuess) and a function to evaluate each guess with.  We set the
%Maximum number of Function evaluations and maximum iterations very high to
%try to ensure it will never fail because of time constraints.  Normally
%the Tolerance on the independent variable (TolX) and the tolerance on the
%function evaluation value (TolFun) should be set independently but in our
%case the two values will be very close to identical.  If the ship
%successfully lands on the asteroid in the time allotted then
%timeObjectiveFunction returns the timeGuess as the function value, if it
%fails then timeObjectiveFunction returns a very large value.  As long as
%the ship is landing on the asteroid the variation in X and the objective
%function will be identical so we assign them to the same value.

%A drawback of using fminsearch like this on a 1 dimensional function is
%that it knows nothing about the search space.  We know that the next
%lowest answer will always be at a lower time guess than the previous but
%there is no way to input that information to the algorithm. For some time
%we used a binary search but from time to time there are irregularities in
%the results from timeObjectiveFunction and fminsearch is much more capable
%of handling those than our binary search was.
%G_c_converge = zeros(1,2*G_order+2);
%G_c_converge = -1 + 2*rand(1,2*G_order+2);
%G_c_converge

%The following code iterates through time guesses ranging from min to a max.
%This is used instead of the outer fminsearch minimizing the trip time. It
%splits up the process into three parts: the first iterates upward from the
%min time guess and exits when convergence begins to occur. The second loop
%then iterates downward at a smaller time step until convergence
%ceases to occur, at which point it will exit and move on to the third. The
%third loop uses a binary search method to find the minimum trip time which
%must be found between the last converging time and the first
%non-converging time of the previous loop. This whole process requires that
%the min time guess is below the lowest possible trip time

lastConverge = nan;
lastfval = nan;
lastEscape = nan;
%setting the max and min time guesses
if direction == Direction.RETURN
    MinTimeGuess = 0.75;
    MaxTimeGuess = 10;
    timeStep = .005;
elseif direction == Direction.FORWARD
    MinTimeGuess = lastConverge - .1;
    MaxTimeGuess = 10;
    timeStep = .01;
end

%initializing the time guess to the min
timeGuess = MinTimeGuess;

%first loop
while timeGuess < MaxTimeGuess
    %c_converge = zeros(1,2*order+2);
    c_converge = (pi/2)*(-1 + 2*rand(1,2*order+2));
    [c_converge,converge,lastConverge,lastfval,massStruct,NDmdot,a0,a0_earth,escapeVelocity,earthEscapeAngle,earthConditions] = timeObjectiveFunction(c_converge,order,direction,timeGuess,NumberOfEngines,uexhaust,inputPower,engineEfficiency,massPowerPlant,massThruster,massPayload,launchRadius,lastConverge,lastfval,lastEscape,GC_ARF,GC_AUF,GC_AHF,GC_ATF,GC_ERF,GC_ETF,GC_EUF);
    %converge
    if strcmpi (converge, 'yes') %exitting when convergence occurs
        
        %lastConverge = timeGuess;
        break
    end
    
    timeGuess = timeGuess+timeStep; %decreasing by time step specified above
end
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++='
%second loop
while timeGuess > MinTimeGuess
    
    [c_converge,converge,lastConverge,lastfval,massStruct,NDmdot,a0,a0_earth,escapeVelocity,earthEscapeAngle,earthConditions] = timeObjectiveFunction(c_converge,order,direction,timeGuess,NumberOfEngines,uexhaust,inputPower,engineEfficiency,massPowerPlant,massThruster,massPayload,launchRadius,lastConverge,lastfval,lastEscape,GC_ARF,GC_AUF,GC_AHF,GC_ATF,GC_ERF,GC_ETF,GC_EUF);
    %converge
    if strcmpi (converge, 'no') %exiting when convergence ceases to occur
        break
    end
    timeGuess = timeGuess - timeStep/10; %decreasing by a much smaller time step
end
stan_length = timeStep/10; %This calculates the difference between the last converging time and the first non-converging time
'-----------------------------------------------------'
%third loop
for j = 1:1:6
    
    if strcmpi (converge, 'yes')
        timeGuess = timeGuess - stan_length/(2^j); %if time is convergent then it is decreased
    elseif strcmpi (converge, 'no')
        timeGuess = timeGuess + stan_length/(2^j); %if time is non-convergent then it is increased
    end
    [c_converge,converge,lastConverge,lastfval,massStruct,NDmdot,a0,a0_earth,escapeVelocity,earthEscapeAngle,earthConditions] = timeObjectiveFunction(c_converge,order,direction,timeGuess,NumberOfEngines,uexhaust,inputPower,engineEfficiency,massPowerPlant,massThruster,massPayload,launchRadius,lastConverge,lastfval,lastEscape,GC_ARF,GC_AUF,GC_AHF,GC_ATF,GC_ERF,GC_ETF,GC_EUF);
    %converge
    %if strcmpi (converge, 'yes')
    %   lastConverge = timeGuess;
    %end
end
finalTime = lastConverge;
finalTime
EscapeTime = lastEscape;
EscapeTime
PhiCoeff = c_converge;
PhiCoeff
fval = lastfval;
fval


%When fminsearch finishes running it only knows the lowest trip time but we
%want to know much more about the trajectory the ship took.  FindPath is a
%function that is almost identical to timeObjectiveFunction, it finds the
%optimum trajectory again and returns any information we want about the
%trip.  It may be more efficient to simply record information about the
%trajectory during runtime but the optimum run is not necessarily the last
%run in fminsearch so it would require saving all the information every
%time a time guess was tested.  We intended to test and see if that was a
%more efficient option, having a function that is such a close copy of
%timeObjectiveFunction is a bad coding practice.
%finalTime
[PlotFileName,Rerror,Thetaerror,Uerror,Herror]=PlotAndWriteToFile(order,direction,PhiCoeff,fval,EscapeTime,finalTime,uexhaust,GC_ARF,GC_ATF,GC_AUF,GC_AHF,a0,a0_earth,escapeVelocity,earthEscapeAngle,earthConditions);

%[phiCoeff,fval,EscapeTime,plotFileName,Mstruct]=FindPath(G_order,finalTime,tolx,tolfun,NumberOfEngines,alphaP,alphaT,inputPower, uexhaust, engineEfficiency,massPayload);

timeToExecute=toc;%ends timer for function
%timeToExecute
end
