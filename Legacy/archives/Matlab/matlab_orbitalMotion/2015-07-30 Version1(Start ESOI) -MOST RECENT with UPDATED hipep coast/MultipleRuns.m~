function MultipleRuns()
%function MultipleRuns contains variables for minumum and maximum values that are passed to the
%MinimizeTripTime function. It also contains variables for incrementing
%those values. The function will iterate MinimizeTripTime over the given
%range of parameters with the specified increment size.

%opens file for writing
Data = fopen('MultipleRunsData.txt','w');
%Prints data headers to the file.
%Note the double tab between the thruster angle coefficients and the rest
%of the data. This is intentional, for future importing into Excel.
fprintf(Data, 'Polynomial Order\tFinal Time(yr)\tEscape Time\tComputation Time(s)\tEarth Escape Angle(rad)\tFinal Function Value\tConvergence Radius(yr)\tNumber of Engines\tAlphaP\tAlphaT\tInput Power\tUex\tEfficiency\tPayloadMass\tR error\tTheta error\tU error\tH error\tPlot File Name\tPhi Coefficients\n');
fclose(Data);
%fprintf(Data2, 'Radial Position\tAngular Position\tRadial Velocity\tSpecific Angular Momentum\tFval\n');

%Initializes minimum values
MinOrder = 7;    
MinAlphaP = 16;  

%global G_MassFuel;        %This is the fuel used during the first trip which is evaluated first; it will be added to the payload of the forward trip
%global G_NDmdot;          %used in calculating the fuel mass of first trip
%global RoundTripTime;     %total round trip time
%global last_conv;         %keeps track of the most recent (and therefore lowest) converging time

matlabpool open

%Initializes maximum values
MaxOrder = 7;   
MaxAlphaP = 16; 
PowerRuns = 1; %Number of outer iterations through input Power values
for Run = 1:1:PowerRuns
for e = 2:1:2 %number of sets of engines, sets the power level, i.e. 1 = 150kW, 2 = 300kW, etc.
%The 'ith' member of each vector is run together as a set.

                AlphaT = [10,10,10,10,10,15];
                NumEngines = e*[2*Run,6*Run,1*Run,5*Run,1*Run,1*Run];
                InputPower = [75,25,150,30,150,150];
                Uex = [29000,30000,80000,87500,31500,42500];
                Efficiency = [.56,.67,.7,.8,.4,.6];
                convergenceRadius = .0001;
                Payload = 1000;

%Iterates over polynomial-fit order
for Order = MinOrder:1:MaxOrder

        for AlphaP = MinAlphaP:16:MaxAlphaP
            %****************************************************
            for a = 1:1:1
            %NUMBER OF DISTINCT THRUSTER CASES GOES IN THIS LOOP
            for n = 2:2
                 %************************************************
                 % This is screen output (for displaying where the code is)
                 Order
                 AlphaP
            %************************************************
            %This is the outer FMINSEARCH that minimizes trip time; the
            %inner FMINSEARCH that ensured that the objective function is
            %met is inside this.
            
            direction = 'return'; %set for return journey
            RoundTripTime = 0; %Initializing the total trip time
            MassFuel = 0;
            lastConverge = 0;
            
            %This loop runs through the return journey and then the
            %forward journey and calculates the total round trip time
            for k = 1:1:2
                
                %the following was used as the initial time guesses
                %when we were using fminsearch to minimize the trip time
                %if strcmpi(direction, 'return')
                % 5   TimeGuess = 1;
                %elseif strcmpi (direction, 'forward')
                %   TimeGuess = 2.5;
                %end
                TimeGuess = 0; %initializes the timeguess to zero; it will be updated in MinimizeTripTime; this is not necessary but will be useful if we use fminsearch again
                
                [finalTime,EscapeTime,runTime,phiCoeff,plotFileName,rerror,thetaerror,uerror,herror,FunVal,lastConverge,massPowerPlant,massStruct,NDmdot] = MinimizeTripTime(Order,direction,MassFuel,TimeGuess,convergenceRadius,NumEngines(n),AlphaP,AlphaT(n),InputPower(n), Uex(n), Efficiency(n),Payload,lastConverge);
                
                %Outputs everything except thruster angle coefficients to the
                %data file, in the order specified in the header.
                % fprintf(Data, '%s\t', Engines(n).ThrusterName);
                % fprintf(Data, '%6.2d\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\r\n',Order,finalTime,EscapeTime,runTime,phiCoeff(end),FunVal,convergenceRadius,NumEngines(n),AlphaP,AlphaT(n),InputPower(n),Uex(n),Efficiency(n),Payload,rerror,thetaerror,uerror,herror,plotFileName,massStruct,NDmdot,massPowerPlant,MassFuel);
                fopen(Data, 'a');
                fprintf(Data, '%6.2d\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g\t%s\n',Order,finalTime,EscapeTime,runTime,phiCoeff(end),FunVal,convergenceRadius,NumEngines(n),AlphaP,AlphaT(n),InputPower(n),Uex(n),Efficiency(n),Payload,rerror,thetaerror,uerror,herror,plotFileName,phiCoeff);
              
                %Outputs the set of thruster angle coefficients              
                %for m = 1:1:(size(phiCoeff,2)-1)
                %    if m ~= size(phiCoeff,2)-1
                %    fprintf(Data, '%6.12g,',phiCoeff(m));
                %    else
                %    fprintf(Data, '%6.12g',phiCoeff(m));   %don't put the comma after the last coefficient
                %    end
                %    %NOTE:the last index of the Phi array contains the Earth
                %    %escape angle, which is excluded here.
                %end
                fclose(Data);
                %fprintf(Data2, '%6.12g\t%6.12g\t%6.12g\t%6.12g\t%6.12g',G_rVal,G_thetaVal,G_uVal,G_hVal,G_fVal);
                
                MassFuel = NumEngines(n)*lastConverge*NDmdot; %calculate the fuel mass needed for the return trip; added to payload of forward trip; it is calculated during the second loop for the foward trip also but not used
                %G_MassFuel
                %RoundTripTime = RoundTripTime + finalTime; %update the total round trip time
                RoundTripTime = RoundTripTime + lastConverge;
                direction = 'forward'; %set for forward journey
                '********************************************************************************************************'
            end
            RoundTripTime
            end
            end
        end
end
    
end
end

matlabpool close local

%fclose(Data);
end