%This function is called by fminsearch which means it must follow a very
%specific format.  It recieves a vector of independent variables, in this
%case one variable representing the trip time guess.  It then returns a
%value that fminsearch is trying to minimize.  The goal is to make this
%function so that fminsearch will find the shortest possible time in which
%the ship can still land on the asteroid.  Normally a problem like that
%would be handled by a constrained optamization algorythm but fminsearch is
%not designed to handle constraints.  Our solution was to artificially
%create the global minimum of our function at that point.

%called by the fminsearch used in MinimizeTripTime
function [c_converge,converge,lastConverge,lastfval,lastEscape,massStruct,NDmdot,a0,a0_earth,escapeVelocity,earthEscapeAngle,earthConditions] = timeObjectiveFunction(c_converge,order,direction,TimeGuess, NumberOfEngines,uexhaust,inputPower,efficiency,massPowerPlant,massThruster,massPayload,launchRadius,lastConverge,lastfval,lastEscape,GC_ARF,GC_AUF,GC_AHF,GC_ATF,GC_ERF,GC_ETF,GC_EUF)
%****************************************************************
%most of these constants are initialized in InitializeConstants.m which is
%called in an earlier function.

%Global Variables
%global G_order;            %Order of power series fit to be used     
%global G_timeTest;          %Current time guess
%global G_escapeTime;        %time taken to escape earth
%global G_earthConditions;   %Vector of earth radius,radial velocity, and theta at escape
%global G_heliotime;        %this is used to normalize the fourier frequency by the time of the heliocentric trip
% global G_conv;              %flag indicating whether convergence occured
% global last_conv;           %time of last convergence
%global G_lastescape;        %earth escape time of last convergence
% global G_lastfval;          %fval of last convergence
% global tolx;                %tolerance of varying parameter in fminsearch
% global tolfun;              %tolerance of fminsearch function value
% global G_fmin;              %Desired minimum value of F
% global G_fcount;            %Keeps track of number of F iterations for each convergence
%global Data3;               %File for counting F convergence
maxNumIter = 30000;         %Maximum number of times fminsearch is called per time guess
% G_fcount = 0;
fmin = 1E-20;
tolx = 1E-10;
tolfun = 1E-20;
%G_c is a vector of independent variables to be passed to fminsearch for
%optamization.  The reptresent the coefficients of the fourier series used
%to calculate phi and the last coefficient is escape angle from earth
%relative to the sun (towards sun, away from sun ect.)
%global G_c; 
%global G_c_converge;        %keeps track of fourier coefficients of previous convergence
%global G_interesting;       %flag indicating whether the value of fval is below the set interesting threshold
interestingThreshold = 1E-1;
%************************************************
timeTest = TimeGuess;  
[massStruct,NDmdot,a0,a0_earth] = CalculateEngineParameters(direction,TimeGuess,NumberOfEngines,uexhaust,inputPower,efficiency,massPowerPlant,massThruster,massPayload); %calculates engine parameters given the fuel guess

%Given the ship parameters and user specified initial conditions (all
%global variables) EscapeEarth calculates the time required to leave earth
%sphere of influence.  The time passed to it must be greater than the time
%required to escape or the value returned will be incorrect.  We need to
%make it more obvious when that error occurs.
[escapeTime,escapeVelocity,earthEscapeAngle] = EscapeEarth(order, direction, 2, uexhaust, a0, a0_earth, launchRadius);
escapeTime
%calculates conditions of earth at time of escape.  The time passed to
%it is the length of the heliocentric trip.
earthConditions=CalcEarthConditions(timeTest-escapeTime,order,direction,uexhaust,a0,a0_earth,GC_ERF,GC_ETF,GC_EUF);
%G_earthConditions
%A Fourier series begins with 1 coefficient for order 0 and then adds 2 for
%every increase in order after that.  The last coefficient represents the
%earths escape angle from earth (toward sun, away from sun ect.) which is
%why there are 2*order+2 independent variables.
%The values being initialized to zeros is arbitrary but we have found that it gives
%the best results
%G_c = zeros(1,2*G_order+2);
TimeGuess  %Displays the current time guess on the screen
%G_heliotime = G_timeTest - escapeTime;

c_converge
%fminsearch is an unconstrained optamization algorythm in MATLAB.  
%[phiCoeff,fval,~,~] = fminsearch('landingObjectiveFunction',c_converge,optimset('MaxFunEvals',maxNumIter,'MaxIter',maxNumIter,'TolX',tolx,'TolFun',tolfun));
[phiCoeff,fval,~,~] = fminSearchLanding(c_converge,order,direction,uexhaust,a0,a0_earth,escapeTime,timeTest,escapeVelocity,earthEscapeAngle,earthConditions,GC_ARF,GC_AUF,GC_AHF,GC_ATF,optimset('MaxFunEvals',maxNumIter,'MaxIter',maxNumIter,'TolX',tolx,'TolFun',tolfun));

% fprintf(Data3, '%6.12g\t', G_fcount * 1000);
% fprintf(Data3,' iterations for timeguess ');
% fprintf(Data3, '%6.12g\r\n', TimeGuess);

if fval<fmin
    ObjectiveValue = TimeGuess;
    c_converge = phiCoeff;   %updates c_converge to the phi coefficients of the most recent convergence
    converge = 'yes';            %updating for most recent run
    lastConverge = TimeGuess;     %updating for most recent run
    lastEscape = escapeTime;
    lastfval = fval;
else
    ObjectiveValue = fval*1E20;
    converge = 'no';
    %lastConverge = nan;
    %lastfval = nan;
end

ObjectiveValue%Displays the objective value from that guess on the screen
converge 
%c_converge  %displays the coefficients of the most recent convergence
 
end
